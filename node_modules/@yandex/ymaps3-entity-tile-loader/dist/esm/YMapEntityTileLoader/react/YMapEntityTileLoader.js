import throttle from 'lodash/throttle';
export const DEFAULT_THROTTLE_TIMOUT = 300;
export const YMapEntityTileLoaderReactifyOverride = (YMapEntityTileLoaderI, { reactify, React }) => {
    const YMapEntityTileLoaderReactified = reactify.entity(YMapEntityTileLoaderI);
    const FeaturesList = React.memo(({ features, getFeatureId, entity }) => {
        return (React.createElement(React.Fragment, null, features.map((feature) => (React.createElement(React.Fragment, { key: getFeatureId(feature) }, entity(feature))))));
    });
    const YMapEntityTileLoader = React.forwardRef((props, ref) => {
        var _a;
        const [features, setFeatures] = React.useState([]);
        const updateFeaturesList = React.useMemo(() => { var _a; return throttle(setFeatures, (_a = props.renderDelay) !== null && _a !== void 0 ? _a : DEFAULT_THROTTLE_TIMOUT); }, [(_a = props.renderDelay) !== null && _a !== void 0 ? _a : DEFAULT_THROTTLE_TIMOUT]);
        const onFeatureAdd = React.useCallback((feature) => {
            var _a;
            (_a = props.onFeatureAdd) === null || _a === void 0 ? void 0 : _a.call(props, feature);
            if (!features.includes(feature)) {
                features.push(feature);
            }
            updateFeaturesList([...features]);
            return false;
        }, [features]);
        const onFeatureRemove = React.useCallback((feature) => {
            var _a;
            (_a = props.onFeatureRemove) === null || _a === void 0 ? void 0 : _a.call(props, feature);
            const index = features.indexOf(feature);
            if (index !== -1) {
                features.splice(index, 1);
            }
            updateFeaturesList([...features]);
            return false;
        }, [features]);
        return (React.createElement(React.Fragment, null,
            React.createElement(YMapEntityTileLoaderReactified, { ...props, ref: ref, onFeatureAdd: onFeatureAdd, onFeatureRemove: onFeatureRemove }),
            React.createElement(FeaturesList, { features: features, getFeatureId: props.getFeatureId, entity: props.entity })));
    });
    return YMapEntityTileLoader;
};
