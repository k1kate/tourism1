/// <reference types="react" />
import type { GenericFeature, LngLat, YMapEntity } from '@yandex/ymaps3-types';
export type GeojsonFeature = GenericFeature<LngLat>;
export interface YMapEntityTileLoaderProps {
    /** Tile size in pixels. World is 256x256 pixels on 0 zoom in Yandex */
    readonly tileSize: number;
    /**
     * Function for loading data by tile, should return an array of GeoJSON features
     */
    fetchTile: (args: {
        tx: number;
        ty: number;
        tz: number;
        signal: AbortSignal;
    }) => Promise<GeojsonFeature[]>;
    /**
     * Function for getting the id of the feature.
     */
    getFeatureId: (feature: GeojsonFeature) => string;
    /**
     * Function for creating an [YMapEntity](https://ymaps3.world/docs/js-api/ref/index.html#class-mmapentity) from a feature.
     */
    entity: (feature: GeojsonFeature) => YMapEntity<unknown>;
    /**
     * Function is called when a feature is added to the map.
     * If the function returns `false`, the feature will not be added to the map.
     * In this case, you should add the feature to the map yourself.
     */
    onFeatureAdd: (feature: GeojsonFeature) => void | false;
    /**
     * Function is called when a feature is removed from the map.
     * If the function returns `false`, the feature will not be removed from the map.
     * In this case, you should remove the feature from the map yourself.
     */
    onFeatureRemove: (feature: GeojsonFeature) => void | false;
    /**
     * By default, when changing tiles, old features are immediately deleted.
     * But the same points may appear in the new tile, then there was no point in deleting them.
     * Set the delay for applying deletion operations.
     * @default 0
     */
    removalDelay?: number;
}
export declare class YMapEntityTileLoader extends ymaps3.YMapComplexEntity<YMapEntityTileLoaderProps> {
    static [ymaps3.overrideKeyReactify]: import("@yandex/ymaps3-types/reactify/reactify").CustomReactify<YMapEntityTileLoader, import("react").ForwardRefExoticComponent<Pick<YMapEntityTileLoaderProps, "tileSize" | "fetchTile" | "getFeatureId" | "onFeatureAdd" | "onFeatureRemove" | "removalDelay"> & {
        entity: (feature: GeojsonFeature) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
        renderDelay?: number;
    } & import("react").RefAttributes<YMapEntity<Pick<YMapEntityTileLoaderProps, "tileSize" | "fetchTile" | "getFeatureId" | "onFeatureAdd" | "onFeatureRemove" | "removalDelay"> & {
        entity: (feature: GeojsonFeature) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
        renderDelay?: number;
    }, {}>>>>;
    private _tiles;
    private _entities;
    private _listener;
    private _requestRemoveFeatures;
    constructor(props: YMapEntityTileLoaderProps);
    protected _onUpdate({ removalDelay }: Partial<YMapEntityTileLoaderProps>): void;
    protected _onDetach(): void;
    protected _onAttach(): void;
    private _markedForDeletion;
    private _reconcileTiles;
    private _fetchTile;
    private _removeEntities;
    private __addEntity;
    private __removeEntity;
}
